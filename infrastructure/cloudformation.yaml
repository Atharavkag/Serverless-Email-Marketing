AWSTemplateFormatVersion: '2010-09-09'
Resources:
  EmailSenderLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: TechTideEmailSender
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Code:
        S3Bucket: email-marketing01
        S3Key: lambda.zip
      Runtime: python3.8
      Timeout: 60
      Environment:
        Variables:
          BUCKET_NAME: email-marketing01
          SOURCE_EMAIL: atharavkagde7@gmail.com
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: arn:aws:s3:::email-marketing01/*
              - Effect: Allow
                Action:
                  - ses:SendEmail
                  - ses:SendRawEmail
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: email-marketing01
  WeeklySchedule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: "cron(0 9 * * SUN *)"
      Targets:
        - Arn: !GetAtt EmailSenderLambda.Arn
          Id: WeeklyEmailTrigger
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref EmailSenderLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt WeeklySchedule.Arn
